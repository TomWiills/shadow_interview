First Impressions

- Ensure you have a docker image for the scripts/packages you require
- write a unit test
- we want to filter the noisy data 
- then we want to detect the change in y in a certain timeframe, 
- if it is over a certain value we need to apply a filter to smooth it
- the smoothing looks like it should occur in a 0.25 window so apply smoothing +/- 0.125
- the gaussian with jumps test name implies a gaussian filter may need to be used
- trying to detect a change in y will be too difficult with noisy data
- time (x values of the data should not be changed)

Action plan

- find out what frequency the data is recorded at and calculate how many data points we can edit in a 0.125 window
looks like the data is recorded every ~0.00075 so I can smooth +- ~166 data points
- decide which filter to pass the noisy data through
Going to use the moving window average for the initial filter 
- decide on a the delta of y that will trigger a smoothing event
decided on a delta of 1 after testing 
- decide on the smoothing function to use 
utlised average function again for the jumps 
- implement a function to get the new y values, from the smoothed curve, using the fixed x values
not required, data adjusted on the fly
- create a function to graph the end result.
used matplotlib-cpp wrapper to use the same python package the generator.py used
- implement a few unit tests (test known delta y values and the outcomes)

Test/Final Notes:
- currently my solution filters all of the data and then goes back and checks for deltas, I could implement the 
check during the filter to save time and only pass through the data
- when writing tests the private x and y values cannot be accessed, add getters/setters to enable access